generator client {
  provider = "prisma-client-js"
  output   = "../generated/clientShop"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]

}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



enum Role {
  user
  admin
}
enum PaymentType {
  cash
  yape
  plin
}
enum StatusPaid {
  paid
  credit
}
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          Role      @default(user)

  accounts Account[]
  customers  Customer[]
  products   Product[]
  orders     Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Customer {
  id       Int     @id @default(autoincrement())
  name     String
  userId   String
  user     User    @relation(fields: [userId], references: [id])

  orders   Order[]
}
model Product {
  id            Int     @id @default(autoincrement())
  userId        String
  name          String
  description   String?
  salePrice     Float
  image         String
  currentStock  Int

  user          User    @relation(fields: [userId], references: [id])
  stocks        Stock[]
  orderItems    OrderItem[]
}
model Stock {
  id         Int      @id @default(autoincrement())
  productId  Int
  quantity   Int
  date       DateTime @default(now())
  purchasePrice Float  
  product    Product  @relation(fields: [productId], references: [id])
}
model Order {
  id          Int        @id @default(autoincrement())
  total       Float
  paymentType PaymentType
  status      StatusPaid
  customerId  Int
  userId      String
  date        DateTime   @default(now())

  customer    Customer   @relation(fields: [customerId], references: [id])
  user        User       @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]
}
model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  earnings  Float   
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  identifier String   @unique
  token      String
  expires    DateTime

  @@id([identifier])
}